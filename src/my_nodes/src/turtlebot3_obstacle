#!/usr/bin/env python
#################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

# Authors: Gilbert #

import rospy
import math
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist
import numpy as np
import random
import time

LINEAR_VEL = 0.22
STOP_DISTANCE = 0.3
LIDAR_ERROR = 0.05
SAFE_STOP_DISTANCE = STOP_DISTANCE + LIDAR_ERROR

class Obstacle():
    def __init__(self):
        self._cmd_pub = rospy.Publisher('cmd_vel', Twist, queue_size=1)
        self.obstacle()
        
    def get_scan(self):
        scan = rospy.wait_for_message('scan', LaserScan)
        scan_filter = []
       
        samples = len(scan.ranges)  # The number of samples is defined in 
                                    # turtlebot3_<model>.gazebo.xacro file,
                                    # the default is 360.
        # !!!Set this para to change field of view                            
        samples_view = 90           # 1 <= samples_view <= samples
        
        if samples_view > samples:
            samples_view = samples

        if samples_view is 1:
            scan_filter.append(scan.ranges[0])

        else:
            left_lidar_samples_ranges = -(samples_view//2 + samples_view % 2)
            right_lidar_samples_ranges = samples_view//2
            
            left_lidar_samples = scan.ranges[left_lidar_samples_ranges:]
            right_lidar_samples = scan.ranges[:right_lidar_samples_ranges]
            scan_filter.extend(left_lidar_samples + right_lidar_samples)

        for i in range(samples_view):
            if scan_filter[i] == float('Inf'):
                scan_filter[i] = 3.5
            elif scan_filter[i] == 0:
                scan_filter[i] = 0.5
            elif math.isnan(scan_filter[i]):
                scan_filter[i] = 0
            
        return scan_filter

    def obstacle(self):
        twist = Twist()
        set_rand_turning_speed = True

        while not rospy.is_shutdown():
            lidar_distances = self.get_scan()
            min_distance = min(lidar_distances)
            max_distance = max(lidar_distances)
            
            if min_distance < SAFE_STOP_DISTANCE:
            
                rospy.loginfo('Turning at %f, distance : %f,max:%f', twist.angular.z, min_distance,max_distance)
                if set_rand_turning_speed:
                    twist.linear.x = 0.0
                    # Random turning
                    twist.angular.z = random.choice([-0.5,0.3,0.4,0.5,0.6,0.7])
                    # twist.angular.z = 0.2

                    self._cmd_pub.publish(twist)
                    rospy.loginfo('Turning at %f, distance : %f, max: %f', twist.angular.z, min_distance,max_distance)
                    set_rand_turning_speed = False
            else:
                twist.linear.x = LINEAR_VEL
                twist.angular.z = 0.0
                self._cmd_pub.publish(twist)
                set_rand_turning_speed = True
                rospy.loginfo('Distance of the obstacle : %f', min_distance)

    # def obstacle(self):
    #     twist = Twist()
    #     set_rand_turning_speed = True

    #     while not rospy.is_shutdown():
    #         lidar_distances = self.get_scan()
    #         min_distance = min(lidar_distances)
            
    #         if min_distance < SAFE_STOP_DISTANCE:
            
    #             rospy.loginfo('Turning at %f, distance : %f', twist.angular.z, min_distance)
            
    #             twist.linear.x = 0.0
    #             # Random turning
    #             twist.angular.z = random.choice([-1,1])
    #             # twist.angular.z = 0.2

    #             self._cmd_pub.publish(twist)
    #             time.sleep(1)
    #             rospy.loginfo('Turning at %f, distance : %f', twist.angular.z, min_distance)
    #                 #set_rand_turning_speed = False
    #         else:
    #             twist.linear.x = LINEAR_VEL
    #             twist.angular.z = 0.0
    #             self._cmd_pub.publish(twist)
    #             #set_rand_turning_speed = True
    #             rospy.loginfo('Distance of the obstacle : %f', min_distance)


def main():
    rospy.init_node('turtlebot3_obstacle')
    try:
        obstacle = Obstacle()
    except rospy.ROSInterruptException:
        pass

if __name__ == '__main__':
    main()
